
/*
 * This file is part of Angel Crab
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SpriteEntity imports motion imports cape imports cave:

var movex as double
var movey as double
var speed = 250;
var crab as CrabEntity
var bird as TextureSprite
var switchSide = false
var imagesRight as ImageSheet
var imagesLeft as ImageSheet

func createSprite override as Sprite
{
	var img = scene.createImageFromResource("tile_bird_right")
	var texture = scene.createTextureForImage(img)
	imagesRight = new ImageSheet()
	imagesRight.setSheet(img)
	imagesRight.setRows(1)
	imagesRight.setCols(5)
	imagesRight.setMaxImages(5)
	imagesLeft = new ImageSheet()
	imagesLeft.setSheet(scene.createImageFromResource("tile_bird_left"))
	imagesLeft.setRows(1)
	imagesLeft.setCols(5)
	imagesLeft.setMaxImages(5)
	setImageSheet(imagesRight.toImages())
	var csize = 0.1 * layer.getReferenceHeight()
	bird = SpriteUtil.addTextureSpriteForSize(scene, layer, texture, csize, csize)
	movex = new Random().nextDouble()
	movey = new Random().nextDouble()
	bird.move(movex, movey)
	var gs = scene as GameScene
	crab = gs.getCrabEntity()
	return(bird)
}

func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	movex -= (bird.getX() - crab.getX()) / speed
	movey -= (bird.getY() - crab.getY()) / speed
	if(movex > crab.getX() && switchSide == false) {
		switchSide = true
	}
	if(movex > crab.getX() && switchSide) {
		onCrossedRight(true)
	}
	else {
		onCrossedRight(false)
	}
	bird.move(movex, movey)
}

func onCrossedRight(v as bool)
{
	switchSide = false
	if(v) {
		setImageSheet(imagesLeft.toImages())
	}
	else {
		setImageSheet(imagesRight.toImages())
	}
}